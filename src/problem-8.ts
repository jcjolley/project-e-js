import { performance } from 'perf_hooks';
import { round } from './round';
import { pipe, slice, map, toNumber, reduce, max } from "lodash/fp";

export const doProblem = () => {
  const getProdFromSlice = (startIndex: number, endIndex: number, series: string) => {
    return pipe([
      slice(startIndex, endIndex),
      map(toNumber),
      reduce((prod, x: number) => prod * x, 1),
    ])(series);
  }

  const largestProductInSeries = (numAdjacent: number, series: string) => {
    let largestProduct = 0;
    for (let i = numAdjacent; i < series.length; i++) {
      const prod = getProdFromSlice(i - numAdjacent, i, series);
      largestProduct = max([largestProduct, prod]);
    }
    return largestProduct;
  }

  const theSeries = ``

  const t0 = performance.now()
  const x = largestProductInSeries(13, theSeries)
  const t1 = performance.now()

  console.log(`8. Result: ${x} Time: ${round(t1 - t0, 2)}ms`);
}